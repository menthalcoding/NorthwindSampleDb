@model IEnumerable<NorthwindSampleDb.Models.Products>

@{
	ViewData["Title"] = "Index - Products";
	Layout="~/Pages/Shared/_Layout.cshtml";
}
    
<h1>Products - Index</h1>

<p>
    Web Api Functions:
    <input id="btn_Get" type="button" value="Get" />
    <input id="btn_Post" type="button" value="Post" />
    <input id="btn_Put" type="button" value="Put" />
    <input id="btn_Delete" type="button" value="Delete" />
</p>
<p>
    <a href="/Products/Create" asp-action="Create">Create New</a>
</p>
<table class="table table-striped" id="tbl_Products">
    <thead>
        <tr class="tableCaption">
            <th>@Html.DisplayNameFor(model => model.ProductId)</th>
            <th>@Html.DisplayNameFor(model => model.ProductName)</th>
            <th>@Html.DisplayNameFor(model => model.SupplierID)</th>
            <th>@Html.DisplayNameFor(model => model.CategoryID)</th>
            <th>@Html.DisplayNameFor(model => model.QuantityPerUnit)</th>
            <th>@Html.DisplayNameFor(model => model.UnitPrice)</th>
            <th>@Html.DisplayNameFor(model => model.UnitsInStock)</th>
            <th>@Html.DisplayNameFor(model => model.UnitsOnOrder)</th>
            <th>@Html.DisplayNameFor(model => model.ReorderLevel)</th>
            <th>@Html.DisplayNameFor(model => model.Discontinued)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
	@foreach (var item in Model) 
	{
        <tr>
            <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
            <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
            <td>@Html.DisplayFor(modelItem => item.SupplierID)</td>
            <td>@Html.DisplayFor(modelItem => item.CategoryID)</td>
            <td>@Html.DisplayFor(modelItem => item.QuantityPerUnit)</td>
            <td>@Html.DisplayFor(modelItem => item.UnitPrice)</td>
            <td>@Html.DisplayFor(modelItem => item.UnitsInStock)</td>
            <td>@Html.DisplayFor(modelItem => item.UnitsOnOrder)</td>
            <td>@Html.DisplayFor(modelItem => item.ReorderLevel)</td>
            <td>@Html.DisplayFor(modelItem => item.Discontinued)</td>
            <td>
				<a href="/Products/Edit?ProductId=@item.ProductId">Edit</a>
				<a href="/Products/Details?ProductId=@item.ProductId">Details</a>
                <a href="/Products/Delete?ProductId=@item.ProductId">Delete</a>
            </td>
        </tr>
	}
</tbody>
</table>

<script>
    $(document).ready(function () {
        $('#tbl_Products').DataTable();
    });
</script>
<script>
    $(document).ready(function () {

        /////////////////////////////
        // IMPORTANT
        // The following code samples are provided as an example.
        // Security problems may occur.
        /////////////////////////////

        async function getData(url = '', data = {}) {
            // Default options are marked with *
            let token = "Get your token here, Store it in local storage and read it from local storage is a better method"
            const response = await fetch(url, {
                method: 'GET',
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json',
                    "Authorization": JwtBearerKey //This field value appears. It causes serious security problems.
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                //body: JSON.stringify(data) // body data type must match "Content-Type" header
            });

            if (response.status != '200')
                alert(response.status + ' ' + response.statusText);

            return response.json(); // parses JSON response into native JavaScript objects
        }

        async function postData(url = '', data = {}) {
            // Default options are marked with *
            let token = "Get your token here, Store it in local storage and read it from local storage is a better method"
            const response = await fetch(url, {
                method: 'POST',
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json',
                    "Authorization": JwtBearerKey //This field value appears. It causes serious security problems.
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                body: JSON.stringify(data) // body data type must match "Content-Type" header
            });

            if (response.status != '200')
                alert(response.status + ' ' + response.statusText);

            return response.json(); // parses JSON response into native JavaScript objects
        }

        $('#btn_Get').click(function () {
            getData('api/Products', {})
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Post').click(function () {
            var data = {
				ProductId: '',
				ProductName: '',
				SupplierID: '',
				CategoryID: '',
				QuantityPerUnit: '',
				UnitPrice: '',
				UnitsInStock: '',
				UnitsOnOrder: '',
				ReorderLevel: '',
				Discontinued: '',
            };
            postData('api/Products', data)
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Put').click(function () {
            var ids = '1';
            var data = {
				ProductId: '',
				ProductName: '',
				SupplierID: '',
				CategoryID: '',
				QuantityPerUnit: '',
				UnitPrice: '',
				UnitsInStock: '',
				UnitsOnOrder: '',
				ReorderLevel: '',
				Discontinued: '',
            };
            postData('api/Products/update/' + ids, data)
                .then(data => {
                    alert(JSON.stringify(data)); // JSON data parsed by `data.json()` call
                });
        });

        $('#btn_Delete').click(function () {
            var ids = '2';
            postData('api/Products/delete/' + ids, null)
                .then(data => {
                    alert(JSON.stringify(data));
                });
        });
    });
</script>
